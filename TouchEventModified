extension UITextField: UITableViewDelegate, UITableViewDataSource {
    
    private struct AssociatedKeys {
        static var suggestionsTableView = "suggestionsTableView"
    }
    
    private var suggestionsTableView: UITableView? {
        get {
            return objc_getAssociatedObject(self, &AssociatedKeys.suggestionsTableView) as? UITableView
        }
        set {
            objc_setAssociatedObject(self, &AssociatedKeys.suggestionsTableView, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
        }
    }
    
    private var domainSuggestions: [String] {
        return ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "icloud.com", "aol.com", "google.com", "proton.com", "asl.com", "hotstar.com"]
    }
    
    // Setup function to add UITableView below the UITextField
    func setupEmailDomainSuggestionsTable(tableView: UITableView) {
        guard suggestionsTableView == nil else { return }
        self.suggestionsTableView = tableView
        
        // Set up the table view properties
        self.suggestionsTableView?.delegate = self
        self.suggestionsTableView?.dataSource = self
        self.suggestionsTableView?.isHidden = true
        self.suggestionsTableView?.backgroundColor = .clear
        self.suggestionsTableView?.allowsSelection = true
        self.suggestionsTableView?.isUserInteractionEnabled = true
    }

    // Detect when user types the @ symbol
    func handleTextChanged() {
        guard let text = self.text else { return }
        
        // Show suggestions only after '@' is typed
        if let atIndex = text.firstIndex(of: "@") {
            let domainPrefix = text[text.index(after: atIndex)...]
            let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
            self.showSuggestions(filteredDomains)
        } else {
            self.hideSuggestionsTableView()
        }
    }

    // Show or update the suggestions in the table view
    private func showSuggestions(_ domains: [String]) {
        guard let tableView = suggestionsTableView else { return }
        
        // Ensure the table view is not hidden and set its frame properly
        tableView.isHidden = false
        tableView.reloadData()
        
        // Ensure tableView is positioned below the text field (you can customize this logic)
        if let textFieldSuperview = self.superview {
            let textFieldFrame = self.convert(self.bounds, to: textFieldSuperview)
            tableView.frame = CGRect(x: textFieldFrame.origin.x, y: textFieldFrame.maxY, width: textFieldFrame.width, height: 200) // Example frame
        }
    }

    // Hide suggestions if no '@' or if list is empty
    private func hideSuggestionsTableView() {
        suggestionsTableView?.isHidden = true
    }

    // UITableView Delegate & DataSource methods
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return 0 }
        
        let domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        
        return filteredDomains.count
    }

    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "DomainCell") ?? UITableViewCell(style: .default, reuseIdentifier: "DomainCell")
        
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return cell }
        
        let domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        cell.backgroundColor = .white
        cell.textLabel?.text = filteredDomains[indexPath.row]
        
        return cell
    }

    // Handle the selection of a domain
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return }
        
        var domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        
        if let domain = filteredDomains[safe: indexPath.row] {
            self.text = text.prefix(upTo: atIndex) + "@" + domain
            hideSuggestionsTableView()
        }
    }

    // Common initialization for both frame-based and storyboard-based instances
    func commonInit(tableView: UITableView) {
        self.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        setupEmailDomainSuggestionsTable(tableView: tableView)
    }

    @objc private func textFieldDidChange() {
        handleTextChanged()
    }
    
    // Ensure touches pass to table view when it's visible
    override open func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        guard let tableView = suggestionsTableView, !tableView.isHidden else {
            return super.point(inside: point, with: event)
        }
        
        // Check if the touch is inside the table view's bounds
        if tableView.frame.contains(self.convert(point, to: tableView)) {
            return tableView.point(inside: self.convert(point, to: tableView), with: event)
        }
        
        return super.point(inside: point, with: event)
    }
}

// Helper extension to safely access array index
extension Collection {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}
