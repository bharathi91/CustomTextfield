extension UITextField: UITableViewDelegate, UITableViewDataSource {
    
    // Private properties to handle the table view
    private struct AssociatedKeys {
        static var suggestionsTableView = "suggestionsTableView"
    }
    
    private var suggestionsTableView: UITableView? {
        get {
            return objc_getAssociatedObject(self, &AssociatedKeys.suggestionsTableView) as? UITableView
        }
        set {
            objc_setAssociatedObject(self, &AssociatedKeys.suggestionsTableView, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
        }
    }
    private var suggestionsScrollView: UIScrollView? {
    get {
        return objc_getAssociatedObject(self, &AssociatedKeys.suggestionsScrollView) as? UIScrollView
    }
    set {
        objc_setAssociatedObject(self, &AssociatedKeys.suggestionsScrollView, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    }
}

    private var domainSuggestions: [String] {
        return ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "icloud.com", "aol.com", "google.com", "proton.com", "asl.com", "hotstar.com"]
    }
    
    // Setup function to add UITableView below the UITextField
     // Setup function to add any scroll view (UITableView or UICollectionView)
func setupSuggestionsView<T: UIScrollView>(scrollView: T) {
    guard suggestionsTableView == nil else { return }
    
    // Ensure the passed scrollView is either a UITableView or UICollectionView
    if let tableView = scrollView as? UITableView {
        self.suggestionsTableView = tableView
        
        // Set up UITableView properties
        self.suggestionsTableView?.delegate = self
        self.suggestionsTableView?.dataSource = self
        self.suggestionsTableView?.isHidden = true
        self.suggestionsTableView?.backgroundColor = .clear
        self.suggestionsTableView?.allowsSelection = true
        self.suggestionsTableView?.isUserInteractionEnabled = true
        self.suggestionsTableView?.separatorStyle = .none
        self.suggestionsTableView?.layer.borderWidth = 1
        self.suggestionsTableView?.layer.borderColor = UIColor.lightGray.cgColor
        self.suggestionsTableView?.layer.cornerRadius = 8
        self.suggestionsTableView?.layer.masksToBounds = true
    }
    else if let collectionView = scrollView as? UICollectionView {
        self.suggestionsTableView = collectionView as? UITableView
        
        // Set up UICollectionView properties
        self.suggestionsTableView?.delegate = self
        self.suggestionsTableView?.dataSource = self
        self.suggestionsTableView?.isHidden = true
        self.suggestionsTableView?.backgroundColor = .clear
        self.suggestionsTableView?.allowsSelection = true
        self.suggestionsTableView?.isUserInteractionEnabled = true
        self.suggestionsTableView?.separatorStyle = .none
        self.suggestionsTableView?.layer.borderWidth = 1
        self.suggestionsTableView?.layer.borderColor = UIColor.lightGray.cgColor
        self.suggestionsTableView?.layer.cornerRadius = 8
        self.suggestionsTableView?.layer.masksToBounds = true
    }
}


    // Detect when user types the @ symbol
    func handleTextChanged() {
        guard let text = self.text else { return }
        
        // Show suggestions only after '@' is typed
        if let atIndex = text.firstIndex(of: "@") {
            let domainPrefix = text[text.index(after: atIndex)...]
            let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
            self.showSuggestions(filteredDomains)
        } else {
            self.hideSuggestionsTableView()
        }
    }

    // Show or update the suggestions in the table view
    private func showSuggestions(_ domains: [String]) {
        guard let tableView = suggestionsTableView else { return }
        if let window = UIApplication.shared.windows.first(where: { $0.isKeyWindow }) {
            // Disable gesture recognizers temporarily
            if let gestureRecognizers = window.gestureRecognizers {
                for recognizer in gestureRecognizers {
                    recognizer.isEnabled = false
                }
            }
        }
        tableView.isHidden = false
        
        // Update table view data
        tableView.reloadData()
    }

    // Hide suggestions if no '@' or if list is empty
    private func hideSuggestionsTableView() {
        suggestionsTableView?.isHidden = true
        
        // Re-enable gesture recognizers once the table view is hidden
        if let window = UIApplication.shared.windows.first(where: { $0.isKeyWindow }),
           let gestureRecognizers = window.gestureRecognizers {
            for recognizer in gestureRecognizers {
                recognizer.isEnabled = true
            }
        }
    }

    // UITableView Delegate & DataSource methods
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return 0 }
        
        let domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        
        return filteredDomains.count
    }

    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "DomainCell") ?? UITableViewCell(style: .default, reuseIdentifier: "DomainCell")
        
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return cell }
        
        let domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        cell.backgroundColor = .white
        cell.textLabel?.text = filteredDomains[indexPath.row]
        
        return cell
    }

    // Handle the selection of a domain
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let text = self.text, let atIndex = text.firstIndex(of: "@") else { return }
        
        var domainPrefix = text[text.index(after: atIndex)...]
        let filteredDomains = domainSuggestions.filter { $0.hasPrefix(String(domainPrefix)) }
        
        if let domain = filteredDomains[safe: indexPath.row] {
            self.text = text.prefix(upTo: atIndex) + "@" + domain
            hideSuggestionsTableView()
        }
    }

    // Common initialization for both frame-based and storyboard-based instances
    func commonInit(tableView: UITableView) {
        // Add target for editing changes
        self.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        setupEmailDomainSuggestionsTable(tableView: tableView)
    }

    @objc private func textFieldDidChange() {
        handleTextChanged()
    }
}

// Helper extension to safely access array index
extension Collection {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

extension UICollectionViewCell {
    func findCollectionView() -> UICollectionView? {
        var view: UIView? = self.superview
        while view != nil {
            if let collectionView = view as? UICollectionView {
                return collectionView
            }
            view = view?.superview
        }
        return nil
    }
}


// Inside a UICollectionViewCell subclass (e.g., CustomCell)

if let collectionView = self.findCollectionView() {
    // Do something with the collectionView, like scroll to a specific item or section
    print("Found the collection view: \(collectionView)")
} else {
    print("No collection view found")
}

private func showSuggestions<T: UIScrollView>(_ domains: [String], scrollView: T) {
    guard let view = scrollView as? UIView else { return }
    
    if let parentView = view.superview(of: UIStackView.self) {
        if let gestureRecognizers = parentView.gestureRecognizers {
            for recognizer in gestureRecognizers {
                recognizer.isEnabled = false
                print("Recognizer tag: \(recognizer.view?.tag ?? -1)")
            }
        }
    }
    
    // Make sure the scroll view is not hidden and reload its data
    if let tableView = scrollView as? UITableView {
        tableView.reloadData()
    } else if let collectionView = scrollView as? UICollectionView {
        collectionView.reloadData()
    }
    
    let maxHeight: CGFloat = 200
    let totalHeight = CGFloat(domains.count) * 44
    let adjustedHeight = min(totalHeight, maxHeight)
    
    // Ensure the scroll view is positioned below the text field (you can customize this logic)
    if let textFieldSuperview = self.superview {
        let textFieldFrame = self.convert(self.bounds, to: textFieldSuperview)
        scrollView.frame = CGRect(x: textFieldFrame.origin.x, y: textFieldFrame.maxY, width: textFieldFrame.width, height: adjustedHeight)
        
        for cons in scrollView.constraints.enumerated() {
            if cons.element.identifier == "SuggestionTableHeight" {
                cons.element.constant = adjustedHeight
            }
        }
        
        // Update layout
        scrollView.layoutIfNeeded()
    }
}
